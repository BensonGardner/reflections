lesson_2_reflections.txt
Initializing a repository creates a hidden
.git folder but it appears only to track files that
are added from that point forward. If there is a
pre-existing file, you will have to use git add to
start tracking it with git.

Not true! Actually even creating a few file doesn't result in tracking.

"How is the staging area different from the working directory and the repository? What value do you think it offers?"

it doesn't contain everything in your working direcotyr -- only the files you have added (and
possibly also the files you have changed). WAit, I think you don't need to have changed them. It sounds like the files in the working directoyr that have been added might be automatically changed in the staging area.

The staging area is only saved in the repository when you make a commit (save a file).

Since your commits will save multiple files, maybe the staging area cuts down on processing time becuase it's constantly changing to try to match your file status.

"How can you use the staging area to make sure you have one commit per logical change?"

You can add your file to the staging area as you make changes, making sure in this way not to lose anything you might need to go back to. (at least, you can do this once) But you can thereby refrain from actually committing anythiing until you've finished with that particular logical change. so it give you a place to temporarily store stuff without committing to it (get it?).

"What are some situations when branches would be helpful in keeping your history organized? How would branches help?"

1) trying out something you weren't sure was going to wrk -- thus having multiple iterations of the latest experiment but making it super-easy to return to the last known version of the program that you knew worked

2) I.E., when you're at a point where you know a particular commit is going to be pretty imporatnt -- branches would be a nice way to give a human-readable name to that key commit

3) when you have multiple team members working on different pieces of a project, so you can merge the different aspects/pieces later without confusion

"how do the diagrams help you visaulize the branch structure?"

That's a funny question. They make it visual. Ummmm. I guess if more details is warrantged here, it would be to say that I hadn't actually realized until seeing the diagrams and talking about parents that you could actually end up with a commit that isn't reachable - that's lost. and also i think the diagram is a good reminder of how branches have some things in cmomon but not everything.

"What is the result of merging two branches together? Why do we represent it in the diagram the way we do?"

it puts all the commits into one branch, and includes both changes. I actgually am not currently sure whether it includes
all additions, no subtractions, or if you actually get to choose.

they have both bracnehs point lines to a middle poitn which becomes a sort of new branch.

it seems like something you want to do only once you're sure that this stuff is all done.

"What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?"

a lot of stuff is obvious, so the more time you can save by having git d othe merging, the better

on the other hand, it can be confusing - you have to learn how git does stuff to understnad why stuff is turning out the way it is.

so - learning curve at beginning, but lots less time down the road.